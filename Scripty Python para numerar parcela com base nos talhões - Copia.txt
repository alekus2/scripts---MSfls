# -*- coding: utf-8 -*-
import arcpy
from collections import defaultdict

class Toolbox(object):
    def __init__(self):
        """Define o nome e alias da toolbox"""
        self.label = "Toolbox Contador e Exclusor"
        self.alias = "contador_exclusor"

        self.tools = [ContadorExclusor]

class ContadorExclusor(object):
    def __init__(self):
        self.label = "Contar Parcelas e Marcar Exclus√£o"
        self.description = "Conta as parcelas por Index e marca quais manter com base na regra do autoIncrement."
        self.canRunInBackground = False

    def getParameterInfo(self):
        params = []

        param0 = arcpy.Parameter(
            displayName="Feature Class de Entrada",
            name="fc",
            datatype="DEFeatureClass",
            parameterType="Required",
            direction="Input"
        )
        params.append(param0)
        return params
    def execute(self, parameters, messages):
        fc = parameters[0].valueAsText
        campo_index = "Index"
        campo_nm_parcela = "nm_parcela"
        campo_contador = "CONTADOR"
        campo_manter = "MANTER"
        contagens = defaultdict(int)
        with arcpy.da.SearchCursor(fc, [campo_index]) as cursor:
            for row in cursor:
                contagens[row[0]] += 1
        with arcpy.da.UpdateCursor(fc, [campo_index, campo_nm_parcela, campo_contador, campo_manter]) as cursor:
            for row in cursor:
                idx = row[0]
                count_sem_max = contagens[idx]
                count_com_max = max(count_sem_max)
                row[2] = count_com_max
                row[3] = self.autoIncrement(count_sem_max, count_com_max)
                cursor.updateRow(row)

    def autoIncrement(self, parcela, count):
        parcela = int(parcela)
        count = int(count)
        if count <= 3:
            return 1
        return 1 if parcela % 2 != 0 else 0

File "<string>", line 45, in execute
TypeError: 'int' object is not iterable
