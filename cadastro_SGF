import pandas as pd
import os
from datetime import datetime

class CadastroSGF:
    def verificar(self, paths):
        nomes_colunas = [
            "Id","Tipo Propriedade","Id Região","Região","Id Projeto","Projeto",
            "Localidade","Talhão","Ciclo","Rotação","Tipo","Feição Pai",
            "Descrição de Uso do Solo","Fase","Bacia","Solo","Relevo","Espaçamento",
            "Sistema de Propagação","Mat.Genético","Espécie","Data Plantio",
            "Mês de Plantio","Regime","Sítio","Área (ha)","Área GIS","Atualizar via GIS",
            "Distância Total","Tipo de Registro","Cód. Projeto Investimento",
            "Dcr. Projeto Investimento","Cód. Tarefa Proj. Invest.","Não tem",
            "Observações","DCAA Data Emissão","DCAA Data Validade","Início Vigência",
            "Fim Vigência","Distância Terra","Precipitação","Distância Asfalto",
            "Ciclo de Investimento","Área declivosa (%)","Tipo Contrato",
            "Projeto Expansão","DCAA Número","Não tem","Não tem","Regional Colheita",
            "Regional Silvicultura","Região Climática","Não tem","Bioma","Não tem",
            "Não tem","Registro","Ativo"
        ]

        meses = ["Janeiro","Fevereiro","Março","Abril","Maio","Junho",
                 "Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"]
        nome_mes = meses[datetime.now().month - 1]
        data_emissao = datetime.now().strftime("%Y%m%d")

        base_path = os.path.abspath(paths[0])
        if nome_mes.lower() in base_path.lower():
            parent_dir = os.path.dirname(base_path)
            pasta_output = parent_dir if os.path.basename(parent_dir).lower()=='output' \
                           else os.path.join(parent_dir,'output')
        else:
            base_dir = os.path.dirname(paths[0])
            pasta_mes = os.path.join(os.path.dirname(base_dir), nome_mes)
            pasta_output = os.path.join(pasta_mes, 'output')
        os.makedirs(pasta_output, exist_ok=True)

        for path in paths:
            if not os.path.exists(path):
                print(f"Erro: Arquivo '{path}' não encontrado.")
                continue
            print(f"Processando: {path}")
            df = pd.read_excel(path, sheet_name=0, header=1)
            colunas_faltando = []

            # Aqui construímos uma lista de colunas (em ordem) que aceita nomes repetidos
            colunas_final = []
            for col in nomes_colunas:
                if col in df.columns:
                    colunas_final.append(df[col])
                elif col == "Não tem":
                    colunas_final.append(pd.Series([""] * len(df)))
                else:
                    colunas_faltando.append(col)
                    colunas_final.append(pd.Series([""] * len(df)))

            # Agora criamos o DataFrame reorganizado com nomes de colunas repetidos permitidos
            df_reorganizado = pd.concat(colunas_final, axis=1)
            df_reorganizado.columns = nomes_colunas  # mantém a ordem original, incluindo "Não tem" repetido

            nome_base = f"SGF_{nome_mes}_{data_emissao}"
            contador = 1
            destino = lambda c: os.path.join(pasta_output, f"{c}_{str(contador).zfill(2)}.xlsx")
            novo_arquivo = destino(nome_base)
            while os.path.exists(novo_arquivo):
                contador += 1
                novo_arquivo = destino(nome_base)

            df_reorganizado.to_excel(novo_arquivo, index=False)
            print(f"✅ Dados reorganizados salvos em '{novo_arquivo}'.")
            if colunas_faltando:
                print("Colunas esperadas não encontradas na planilha original:")
                for c in colunas_faltando:
                    print(f"  - {c}")

# Exemplo de uso
cadastrar = CadastroSGF()
arquivos = [r"/content/export_lmanhaes_2025-05-07_09-09-01.xls.xlsx"]
cadastrar.verificar(arquivos)
