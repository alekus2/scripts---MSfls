library(readxl)
library(dplyr)
library(tidyr)
library(openxlsx)
library(lubridate)
library(stringr)  # Adicione esta linha para carregar o pacote stringr

OtimizadorIFQ6 <- function(paths) {
  nomes_colunas <- c("CD_PROJETO", "CD_TALHAO", "NM_PARCELA", "DC_TIPO_PARCELA", "NM_AREA_PARCELA",
                     "NM_LARG_PARCELA", "NM_COMP_PARCELA", "NM_DEC_LAR_PARCELA", "NM_DEC_COM_PARCELA",
                     "DT_INICIAL", "DT_FINAL", "CD_EQUIPE", "NM_LATITUDE", "NM_LONGITUDE", "NM_ALTITUDE",
                     "DC_MATERIAL", "NM_FILA", "NM_COVA", "NM_FUSTE", "NM_DAP_ANT", "NM_ALTURA_ANT",
                     "NM_CAP_DAP1", "NM_DAP2", "NM_DAP", "NM_ALTURA", "CD_01", "CD_02", "CD_03")
  
  lista_df <- list()
  equipes <- list()
  meses <- c("Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho",
             "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro")
  mes_atual <- month(Sys.Date())
  nome_mes <- meses[mes_atual]
  data_emissao <- format(Sys.Date(), "%Y%m%d")
  base_dir <- dirname(paths[1])
  pasta_mes <- file.path(dirname(base_dir), nome_mes)
  pasta_output <- file.path(pasta_mes, "output")
  dir.create(pasta_output, showWarnings = FALSE)
  
  cadastro_path <- paths[grepl("SGF", toupper(basename(paths)))][1]
  
  for (path in paths) {
    if (path == cadastro_path || !file.exists(path)) {
      next
    }
    nome_arquivo <- toupper(basename(path))
    base <- if (grepl("LEBATEC", nome_arquivo)) {
      "lebatec"
    } else if (grepl("BRAVORE", nome_arquivo)) {
      "bravore"
    } else if (grepl("PROPRIA", nome_arquivo)) {
      "propria"
    } else {
      escolha <- ""
      while (!escolha %in% c("1", "2", "3")) {
        escolha <- readline(prompt = "Selecione a equipe (1-LEBATEC,2-BRAVORE,3-PROPRIA):")
      }
      c("lebatec", "bravore", "propria")[as.numeric(escolha)]
    }
    
    equipes[[base]] <- ifelse(is.null(equipes[[base]]), 1, equipes[[base]] + 1)
    equipe <- if (equipes[[base]] == 1) {
      base
    } else {
      paste0(base, "_", sprintf("%02d", equipes[[base]]))
    }
    
    df <- tryCatch({
      read_excel(path, sheet = 1)
    }, error = function(e) {
      return(NULL)
    })
    
    df <- df %>% rename_with(toupper) %>% mutate(across(everything(), trimws))
    
    falt <- setdiff(nomes_colunas, names(df))
    if (length(falt) > 0) {
      df <- tryCatch({
        read_excel(path, sheet = 2)
      }, error = function(e) {
        return(NULL)
      })
      df <- df %>% rename_with(toupper) %>% mutate(across(everything(), trimws))
      falt <- setdiff(nomes_colunas, names(df))
      if (length(falt) > 0) {
        next
      }
    }
    
    dff <- df[nomes_colunas] %>% mutate(EQUIPE = equipe)
    lista_df[[length(lista_df) + 1]] <- dff
  }
  
  if (length(lista_df) == 0) {
    cat("nenhum arquivo processado.\n")
    return()
  }
  
  df_final <- bind_rows(lista_df)
  
  dup_cols <- c("CD_PROJETO", "CD_TALHAO", "NM_PARCELA", "NM_FILA", "NM_COVA", "NM_FUSTE", "NM_ALTURA")
  df_final <- df_final %>%
    mutate(`check dup` = ifelse(duplicated(select(., all_of(dup_cols)), fromLast = TRUE) | duplicated(select(., all_of(dup_cols))), "VERIFICAR", "OK"),
           `check cd` = ifelse(CD_01 %in% LETTERS[1:24] & NM_FUSTE == 1, "OK",
                               ifelse(CD_01 == "L" & NM_FUSTE == 1, "VERIFICAR", "OK")),
           CD_TALHAO = str_sub(as.character(CD_TALHAO), -3) %>% str_pad(width = 3, pad = "0"))
  
  # Resto do código...
}

# A seguir, a chamada da função com seus arquivos