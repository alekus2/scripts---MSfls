import pandas as pd
import os

class OtimizadorIFQ6:
    def validacao(self, paths, coluna_codigos):
        # Lista de colunas obrigatórias esperadas
        nomes_colunas = [
            "CD_PROJETO", "CD_TALHAO", "NM_PARCELA", "DC_TIPO_PARCELA",
            "NM_AREA_PARCELA", "NM_LARG_PARCELA", "NM_COMP_PARCELA",
            "NM_DEC_LAR_PARCELA", "NM_DEC_COM_PARCELA", "DT_INICIAL",
            "DT_FINAL", "CD_EQUIPE", "NM_LATITUDE", "NM_LONGITUDE",
            "NM_ALTITUDE", "DC_MATERIAL", "NM_FILA", "NM_COVA",
            "NM_FUSTE", "NM_DAP_ANT", "NM_ALTURA_ANT", "NM_CAP_DAP1",
            "NM_DAP2", "NM_DAP", "NM_ALTURA", "CD_01"
        ]
        
        # Lista de códigos válidos: letras de A a W
        codigos_validos = [chr(i) for i in range(ord('A'), ord('X'))]
        
        for path in paths:
            # Verifica se o arquivo existe
            if not os.path.exists(path):
                print(f"Erro: O arquivo '{path}' não foi encontrado.")
                continue
            print(f"Processando o arquivo: {path}")
            
            # Lê o arquivo Excel
            df = pd.read_excel(path)
            
            # Converte os nomes das colunas para maiúsculas
            df.columns = [col.upper() for col in df.columns]
            
            # Verifica se as colunas obrigatórias estão presentes
            colunas_faltando = [col for col in nomes_colunas if col not in df.columns]
            if colunas_faltando:
                print(f"Erro: As colunas esperadas não foram encontradas no arquivo '{path}': {', '.join(colunas_faltando)}")
                continue
            
            # Converte o nome da coluna de códigos para maiúsculas
            coluna_codigos = coluna_codigos.upper()
            
            # Inicializa a lista de colunas a serem mantidas com as colunas obrigatórias
            colunas_a_manter = nomes_colunas.copy()
            
            # Verifica se a coluna de códigos existe no DataFrame
            if coluna_codigos in df.columns:
                # Filtra os valores válidos na coluna de códigos
                codigos_encontrados = df[coluna_codigos].astype(str).str.upper().isin(codigos_validos)
                if codigos_encontrados.any():
                    # Exibe os códigos válidos encontrados
                    print(f"Códigos válidos encontrados na coluna '{coluna_codigos}' no arquivo '{path}':")
                    print(df.loc[codigos_encontrados, coluna_codigos].unique())
                    
                    # Inclui a coluna de códigos na lista de colunas a serem mantidas
                    colunas_a_manter.append(coluna_codigos)
                else:
                    print(f"Nenhum código válido encontrado na coluna '{coluna_codigos}' no arquivo '{path}'. A coluna não será incluída no arquivo final.")
            else:
                print(f"A coluna '{coluna_codigos}' não foi encontrada no arquivo '{path}'.")
            
            # Filtra o DataFrame para manter apenas as colunas selecionadas
            df_filtrado = df[colunas_a_manter]
            
            # Conta as ocorrências de cada valor em 'NM_FILA' e armazena em 'NM_COVA'
            if 'NM_FILA' in df_filtrado.columns:
                df_filtrado['NM_COVA'] = df_filtrado.groupby('NM_FILA').cumcount() + 1
                print(f"Contagem de 'NM_FILA' registrada em 'NM_COVA' para o arquivo '{path}'.")
            else:
                print(f"A coluna 'NM_FILA' não foi encontrada no arquivo '{path}'. Não foi possível registrar a contagem em 'NM_COVA'.")
            
            # Define o nome do novo arquivo Excel
            novo_arquivo_excel = os.path.splitext(path)[0] + '_modificado.xlsx'
            
            # Salva o DataFrame filtrado em um novo arquivo Excel
            df_filtrado.to_excel(novo_arquivo_excel, index=False)
            
            print(f"As colunas foram filtradas e o arquivo foi salvo como '{novo_arquivo_excel}'.\n")

# Exemplo de uso:
otimizador = OtimizadorIFQ6()
arquivos = [
    '/content/Base_dados_EQ_01.xlsx',
    '/content/Base_dados_EQ_02.xlsx',
    '/content/Base_dados_EQ_03.xlsx'
]
otimizador.validacao(arquivos, 'cd_02')

