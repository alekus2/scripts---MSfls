import arcpy
from arcpy import env
from arcpy.sa import *
import os

class Toolbox(object):
    def __init__(self):
        """Define a toolbox."""
        self.label = "Interpolation Processing Toolbox"
        self.alias = "idwpython_toolbox"
        self.tools = [IDWToolbox]

class IDWToolbox(object):
    def __init__(self):
        self.label = "IDW Toolbox com Shapefile"
        self.description = "Executa interpolação IDW usando um Shapefile como entrada."

    def getParameterInfo(self):
        params = [
            arcpy.Parameter(displayName="Shapefile de Entrada",
                            name="input_shp",
                            datatype="DEFeatureClass",
                            parameterType="Required",
                            direction="Input"),
            arcpy.Parameter(displayName="Pasta de Saída",
                            name="output_folder",
                            datatype="DEFolder",
                            parameterType="Required",
                            direction="Input"),
            arcpy.Parameter(displayName="Power",
                            name="power",
                            datatype="GPDouble",
                            parameterType="Required",
                            direction="Input"),
            arcpy.Parameter(displayName="Cell Size",
                            name="cell_size",
                            datatype="GPDouble",
                            parameterType="Required",
                            direction="Input"),
            arcpy.Parameter(displayName="Layer de Recorte (Opcional)",
                            name="mask_layer",
                            datatype="DEFeatureClass",
                            parameterType="Optional",
                            direction="Input")
        ]
        return params

    def execute(self, parameters, messages):
        input_shp = parameters[0].valueAsText
        output_folder = parameters[1].valueAsText
        power = parameters[2].value
        cell_size = parameters[3].value  
        mask_layer = parameters[4].valueAsText if parameters[4].value else None
        
        if not arcpy.Exists(input_shp):
            messages.addErrorMessage(f"Erro: O Shapefile '{input_shp}' não foi encontrado.")
            return

        field_names = [f.name for f in arcpy.ListFields(input_shp)]
        required_fields = ["F_Sobreviv"]

        for field in required_fields:
            if field not in field_names:
                messages.addErrorMessage(f"Erro: A coluna '{field}' não foi encontrada no shapefile.")
                return

        # Criar a nova coluna "F_Percent" caso não exista
        percent_field = "F_Percent"
        if percent_field not in field_names:
            arcpy.AddField_management(input_shp, percent_field, "DOUBLE")
            messages.addMessage(f"Campo '{percent_field}' adicionado ao shapefile.")

        # Preencher a nova coluna "F_Percent" convertendo valores de "F_Sobreviv"
        with arcpy.da.UpdateCursor(input_shp, ["F_Sobreviv", "F_Percent"]) as cursor:
            for row in cursor:
                row[1] = row[0] * 100  # Convertendo para porcentagem
                cursor.updateRow(row)
        messages.addMessage(f"Campo '{percent_field}' preenchido com valores de porcentagem.")

        arcpy.MakeFeatureLayer_management(input_shp, "shp_layer")

        # Verifica e retira a extensão espacial
        try:
            arcpy.CheckOutExtension("Spatial")
        except arcpy.ExecuteError:
            messages.addErrorMessage("Erro: A extensão espacial não está disponível.")
            return

        raster_output_folder = os.path.join(output_folder, "Rasters")
        if not os.path.exists(raster_output_folder):
            os.makedirs(raster_output_folder)

        try:
            # Executa a interpolação IDW usando "F_Percent"
            out_raster = arcpy.sa.Idw("shp_layer", percent_field, cell_size, power)
            if mask_layer:
                out_raster = ExtractByMask(out_raster, mask_layer)
            raster_output_path = os.path.join(raster_output_folder, "IDW_Interpolacao_Percent.tif")
            out_raster.save(raster_output_path)

        except Exception as e:
            messages.addErrorMessage(f"Erro ao executar IDW: {str(e)}")
        finally:
            arcpy.CheckInExtension("Spatial")
        
        messages.addMessage("Processamento concluído com sucesso.")
